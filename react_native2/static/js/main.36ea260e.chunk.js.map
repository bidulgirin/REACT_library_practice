{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","props","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAmCeA,MAhCf,YAA0D,EAA1CC,GAA2C,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAC9C,OACI,mCACG,sBAAKC,UAAU,QAAf,UAEK,qBAAKC,IAAKH,EAAQI,IAAKN,IACvB,sBAAKI,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,SAAd,SACKD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OAAgB,oBAAgBL,UAAU,gBAA1B,SAA2CI,GAAlCC,QAEzC,oBAAIL,UAAU,cAAd,SAA6BL,IAC7B,mBAAGK,UAAU,iBAAb,SAA+BH,EAAQS,MAAM,EAAE,gBC4DpDC,G,8DA/Cb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAERC,MAAQ,CACNC,WAAa,EACbC,OAAS,IALO,EAOlBC,UAPkB,sBAON,8BAAAC,EAAA,sEAC0BC,IAAMC,IAAI,4DADpC,gBACSJ,EADT,EACHK,KAAMA,KAAML,OACnB,EAAKM,SAAS,CAACN,SAAQD,WAAW,IAFxB,2CAPM,E,qDAWlB,WACEQ,KAAKN,c,oBAEP,WAAS,IAAD,EACwBM,KAAKT,MAA3BC,EADF,EACEA,UAAWC,EADb,EACaA,OAEnB,OACE,yBAASX,UAAU,YAAnB,SACGU,EACC,qBAAKV,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACQW,EAAOR,KACP,SAAAgB,GAAK,OACD,cAAC,EAAD,CAEAzB,GAAIyB,EAAMzB,GACVC,KAAMwB,EAAMxB,KACZC,MAAOuB,EAAMvB,MACbC,QAASsB,EAAMtB,QACfC,OAAQqB,EAAMC,mBACdrB,OAAQoB,EAAMpB,QANToB,EAAMzB,e,GA7Bf2B,IAAMC,YCtBxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.36ea260e.chunk.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Movie({id, year, title, summary, poster, genres}){\r\n    return(\r\n        <>\r\n           <div className=\"movie\">\r\n               \r\n                <img src={poster} alt={title}></img>\r\n                <div className=\"movie__data\">\r\n                    <h3 className=\"movie__title\">{title}</h3>\r\n                    <ul className=\"genres\">\r\n                        {genres.map((genre, index)=><li key={index} className=\"genres__genre\">{genre}</li>)}\r\n                    </ul>\r\n                    <h5 className=\"movie__year\">{year}</h5>\r\n                    <p className=\"movie__summary\">{summary.slice(0,180)}</p>\r\n                   \r\n                </div>\r\n           </div>\r\n        </>\r\n    )\r\n}\r\n\r\nMovie.propTypes={ //데이터를 가져오는 역할을 하는구나\r\n    id:PropTypes.number.isRequired,\r\n    year:PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary:PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired // props에 arrasy를 추가시키기 위한것이다\r\n    \r\n \r\n\r\n}\r\n\r\nexport default Movie;","/* eslint-disable */\nimport React from 'react';\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\"\nimport \"./App.css\"\nimport \"./Movie.css\"\n//1. npx creat-react-app 설치 \n//2. Food function을 만들고 props로 값 부모로 전달하기\n//2-1. 값은 map으로 배열값을 형성하여 같은 레이아웃을 복붙하는 번거로움을 줄일수있다\n//3. npm i prop-type 설치 (내가 전달받은  props가 내가 원하는 props인지 확인해준다)  \n//4. props 말고 state를 사용해보자\n//5. class 컴포넌트와  function 컴포넌트의 차이를 알아보자 return을 쓰느냐 render을 쓰느냐 \n// class 컴포넌트는 자동적으로 실행된다고한다\n//6. state 값을 변경하지 마시오 \n// state자체를 변경하게 되면 render 메소드가 refresh를 안함 \n//7. setstate로 상태를 복사하고 this.setState({});를 사용한다\n//8. setstate로 상태를 변경하면서 count의 값을 this.state.count +1 로 지정하는데\n// 이 코드는 state값에 의존하고 있어 좋지 못한 코드이다\n//9. setState에다가 function 값으로 바꾸고 this.state를 current로 바꾼다~ 외부 상태에 의존을 하지 않아도 괜찮다!\n//10. react life cycle mounting(태어나는것) , updating(변화하는것), unmounting(죽는것)\n//mounting constroctor() componentDidMount는 render하자마자 호출이 되는 함수이단\n//11. componentDidMount에 데이터를 불러오는 작업을 한다\n// axios로 데이터를 불러올때는 느리기때문에 기달려달라는 의사 표현을 나타내기위해서\n// async(비동기), await 를 사용한다  axios가 끝나길 기다렸다가 계속해라~ 라는 의미래\n//12. css를 다하고 깃헙 홈페이지에 build하는 법\n// npm i gh-pages 를 깔고 package.json에 homepage: http://계정이름.github.io/폴더명/을 입력해줘라(필수)\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n  }\n  state = {\n    isLoading :  true ,\n    movies : [] //미래에 사용할 데이터를 비워도 상관없음\n  };\n  getMovies = async() =>{\n    const {data:{data:{movies}}} =await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n    this.setState({movies, isLoading: false});\n  }\n  componentDidMount(){ //axios로 url안에 있는 데이터를 호출함\n    this.getMovies();\n  }\n  render(){\n    const { isLoading, movies } = this.state;\n    \n    return(\n      <section className=\"container\">\n        {isLoading ? \n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        : \n          <div className=\"movies\">\n                { movies.map(\n                  movie=>(\n                      <Movie \n                      key={movie.id}\n                      id={movie.id} \n                      year={movie.year} \n                      title={movie.title} \n                      summary={movie.summary} \n                      poster={movie.medium_cover_image}\n                      genres={movie.genres}\n                      />\n                ))}\n          </div>\n          }\n      </section>\n        )\n      }\n      \n    \n  }\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}